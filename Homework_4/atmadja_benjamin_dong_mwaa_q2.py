# -*- coding: utf-8 -*-
"""atmadja-benjamin-dong-mwaa-q2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Gu23zGPbbCM79y7Hp-nBK6GSh64Qk_zz
"""

from airflow import DAG
from airflow.operators.python import PythonOperator
from io import StringIO
import requests
import json
import pandas as pd
import pendulum
import time
import numpy as np
from datetime import datetime, timedelta
import boto3

# DAG configuration
local_tz = pendulum.timezone("America/Chicago")

default_args = {
    'owner': 'atmadja-benjamin-dong',
    'depends_on_past': False,
    'retries': 1,
    'retry_delay': timedelta(minutes=5),
}

# Constants
BASE_URL = "https://api.weather.gov/stations/{station}/observations/latest"
S3_BUCKET = "atmadja-benjamin-dong-mwaa"
S3_DIRECTORY = "weather_data"
WEATHER_STATIONS = ["KORD", "KENW", "KMDW", "KPNT"]


def fetch_and_store_weather_data(**kwargs):
    collected_data = {}
    for station in WEATHER_STATIONS:
        url = BASE_URL.format(station=station)
        response = requests.get(url)
        if response.status_code == 200:
            collected_data[station] = response.json()
        else:
            collected_data[station] = {"error": "Failed to fetch data"}
        time.sleep(2)

    rows = []
    time_of_collection = datetime.now(local_tz).isoformat()

    for station, data in collected_data.items():
        props = data.get('properties', {})
        if not props:
            continue

        row = {
            "timeOfCollection": time_of_collection,
            "timestamp": props.get('timestamp'),
            "station": station,
            "temperature": props.get('temperature', {}).get('value'),
            "dewpoint": props.get('dewpoint', {}).get('value'),
            "windSpeed": props.get('windSpeed', {}).get('value'),
            "barometricPressure": props.get('barometricPressure', {}).get('value'),
            "visibility": props.get('visibility', {}).get('value'),
            "precipitationLastHour": props.get('precipitationLastHour', {}).get('value'),
            "relativeHumidity": props.get('relativeHumidity', {}).get('value'),
            "heatIndex": props.get('heatIndex', {}).get('value'),
        }
        rows.append(row)

    df = pd.DataFrame(rows)

    filename = f"{S3_DIRECTORY}/weather_obs_{datetime.now(local_tz).strftime('%Y%m%dT%H%M%S')}.csv"

    csv_buffer = StringIO()
    df.to_csv(csv_buffer, index=False)

    s3 = boto3.client('s3')
    s3.put_object(Bucket=S3_BUCKET, Key=filename, Body=csv_buffer.getvalue())

with DAG(
    'weather_station_observations',
    default_args=default_args,
    description='Collects weather data every 2 hours and uploads to S3',
    schedule_interval='0 */2 * * *',
    start_date=datetime(2025, 6, 2, tzinfo=local_tz),
    catchup=False,
    tags=['weather','api', 's3'],
) as dag:

    collect_weather = PythonOperator(
        task_id='fetch_weather_data',
        python_callable=fetch_and_store_weather_data,
    )